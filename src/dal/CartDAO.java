package dal;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;

public class CartDAO {


    public static Vector<Vector<String>> getCartData(String customerId) {
        Vector<Vector<String>> cartData = new Vector<>();

        try (Connection connection = DatabaseConnection.getInstance().getConnection()) {
            String sql = "SELECT c.ProductID, p.ProductName, p.Price " +
                         "FROM cart c " +
                         "JOIN products p ON c.ProductID = p.ProductID " +
                         "WHERE c.CustomerID = ? AND c.OrderStatus IS NULL";

            try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                preparedStatement.setString(1, customerId);

                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    while (resultSet.next()) {
                        Vector<String> row = new Vector<>();
                        row.add(resultSet.getString("ProductID"));
                        row.add(resultSet.getString("ProductName"));
                        row.add(resultSet.getString("Price"));
                        cartData.add(row);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return cartData;
    }

    public static void confirmOrder(String productId, String customerId, String orderType, String orderStatus, int quantity, float orderCost) {
        try (Connection connection = DatabaseConnection.getInstance().getConnection()) {
            String sql = "INSERT INTO orderr (ProductID, CustomerID, OrderType, OrderStatus) VALUES (?, ?, ?, ?)";

            try (PreparedStatement preparedStatement = connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS)) {
                preparedStatement.setString(1, productId);
                preparedStatement.setString(2, customerId);
                preparedStatement.setString(3, orderType);
                preparedStatement.setString(4, orderStatus);

                int affectedRows = preparedStatement.executeUpdate();

                if (affectedRows > 0) {
                    // Retrieve the autogenerated key (OrderID)
                    ResultSet generatedKeys = preparedStatement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        int orderId = generatedKeys.getInt(1);

                        // Insert into orderdetails
                        String orderDetailsSql = "INSERT INTO orderdetails (OrderID, OrderDate, OrderCost, OrderQuantity) VALUES (?, CURRENT_DATE(), ?, ?)";
                        try (PreparedStatement orderDetailsStatement = connection.prepareStatement(orderDetailsSql)) {
                            orderDetailsStatement.setInt(1, orderId);
                            orderDetailsStatement.setFloat(2, orderCost);
                            orderDetailsStatement.setInt(3, quantity);

                            orderDetailsStatement.executeUpdate();
                        }
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        // Instead of deleting, update the status in the cart table
        updateCartItemStatus(productId, customerId, "Confirmed");
    }

    public static void deleteProductFromCart(String productId,String customerId) {
        // Instead of deleting, update the status in the cart table
        updateCartItemStatus(productId, customerId, "Deleted");
    }

    private static void updateCartItemStatus(String productId, String customerId, String status) {
        try (Connection connection = DatabaseConnection.getInstance().getConnection()) {
            String updateCartSql = "UPDATE cart SET OrderStatus = ? WHERE ProductID = ? AND CustomerID = ?";

            try (PreparedStatement updateCartStatement = connection.prepareStatement(updateCartSql)) {
                updateCartStatement.setString(1, status);
                updateCartStatement.setString(2, productId);
                updateCartStatement.setString(3, customerId);

                updateCartStatement.executeUpdate();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    //////////////////////////////////////////////////////////////////////////////////////////////
    

    public Vector<Vector<String>> getAllOrderData(String customerId) {
    	  Vector<Vector<String>> allData = new Vector<>();

    	    try (Connection connection = DatabaseConnection.getInstance().getConnection()) {
    	        String sql = "SELECT o.OrderID, p.ProductName, o.OrderType, o.OrderStatus, od.OrderCost " +
    	                "FROM orderr o " +
    	                "JOIN orderdetails od ON o.OrderID = od.OrderID " +
    	                "JOIN products p ON o.ProductID = p.ProductID " +
    	                "WHERE o.CustomerID = ?";

    	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
    	            preparedStatement.setString(1, customerId);

    	            try (ResultSet resultSet = preparedStatement.executeQuery()) {
    	                while (resultSet.next()) {
    	                    Vector<String> row = new Vector<>();
    	                    row.add(resultSet.getString("OrderID"));
    	                    row.add(resultSet.getString("ProductName"));
    	                    row.add(resultSet.getString("OrderType"));
    	                    row.add(resultSet.getString("OrderStatus"));
    	                    row.add(resultSet.getString("OrderCost"));
    	                    allData.add(row);
    	                }
    	            }
    	        }
    	    } catch (SQLException e) {
    	        e.printStackTrace();
    	    }

    	    return allData;
    }
}
